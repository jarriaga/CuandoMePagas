<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppHttpOdmDocumentsUsuarioHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['firstname'])) {
            $value = $data['firstname'];
            $return = (string) $value;
            $this->class->reflFields['firstname']->setValue($document, $return);
            $hydratedData['firstname'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email'])) {
            $value = $data['email'];
            $return = (string) $value;
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['lastname'])) {
            $value = $data['lastname'];
            $return = (string) $value;
            $this->class->reflFields['lastname']->setValue($document, $return);
            $hydratedData['lastname'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['facebookID'])) {
            $value = $data['facebookID'];
            $return = (string) $value;
            $this->class->reflFields['facebookID']->setValue($document, $return);
            $hydratedData['facebookID'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['password'])) {
            $value = $data['password'];
            $return = (string) $value;
            $this->class->reflFields['password']->setValue($document, $return);
            $hydratedData['password'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['activationCode'])) {
            $value = $data['activationCode'];
            $return = (string) $value;
            $this->class->reflFields['activationCode']->setValue($document, $return);
            $hydratedData['activationCode'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['forgotCode'])) {
            $value = $data['forgotCode'];
            $return = (string) $value;
            $this->class->reflFields['forgotCode']->setValue($document, $return);
            $hydratedData['forgotCode'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['forgotAt'])) {
            $value = $data['forgotAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['forgotAt']->setValue($document, clone $return);
            $hydratedData['forgotAt'] = $return;
        }

        /** @Field(type="bool") */
        if (isset($data['accountEnable'])) {
            $value = $data['accountEnable'];
            $return = (bool) $value;
            $this->class->reflFields['accountEnable']->setValue($document, $return);
            $hydratedData['accountEnable'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value === null) { $return = null; } else { $return = \Doctrine\ODM\MongoDB\Types\DateType::getDateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['idhw'])) {
            $value = $data['idhw'];
            $return = (string) $value;
            $this->class->reflFields['idhw']->setValue($document, $return);
            $hydratedData['idhw'] = $return;
        }

        /** @Many */
        $mongoData = isset($data['autos']) ? $data['autos'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['autos']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['autos']->setValue($document, $return);
        $hydratedData['autos'] = $return;

        /** @Many */
        $mongoData = isset($data['last5autos']) ? $data['last5autos'] : null;
        $return = new \Doctrine\ODM\MongoDB\PersistentCollection(new \Doctrine\Common\Collections\ArrayCollection(), $this->dm, $this->unitOfWork);
        $return->setHints($hints);
        $return->setOwner($document, $this->class->fieldMappings['last5autos']);
        $return->setInitialized(false);
        if ($mongoData) {
            $return->setMongoData($mongoData);
        }
        $this->class->reflFields['last5autos']->setValue($document, $return);
        $hydratedData['last5autos'] = $return;
        return $hydratedData;
    }
}